from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain.load import loads, dumps

class Reciprocal_Rank_fusion:
    def __init__(self) -> None:
        self.multi_query_prompt="""
            You are an AI language model assistant.
            Your task is create five versions of the user's question to fetch documents from a vector database.
            By offering multiple perspectives on the user's question, your goal is to assist the user in overcoming some of the restrictions of distance-based similarity search.
            Give these alternative questions, each on a new line.
            Question: {question}
            Output:
        """

    def rank_fusion(self, documents, k=60):
        relevant_chunks = []
        doc_ranks = {}

        for sublist in documents:
            for rank, doc in enumerate(sublist):
                doc_str=dumps(doc)
                doc_ranks[doc_str] = doc_ranks.get(doc_str, 0) + 1 / (k + rank + 1)

        # return [[doc, score]]
        for doc_str, score in doc_ranks.items():
            relevant_chunks.append([loads(doc_str), score])
        
        relevant_chunks.sort(key=lambda x: x[1], reverse=True)

        return relevant_chunks

    def get_relevant_docs(self, llm, retriever, user_prompt):
        multi_query_prompt_template = ChatPromptTemplate.from_template(self.multi_query_prompt)

        retrieval_chain = (
            multi_query_prompt_template
            # messages=[HumanMessage(content="\n            You are an AI language model assistant.\n            Your task is create five versions of the user's question to fetch documents from a vector database.\n            By offering multiple perspectives on the user's question, your goal is to assist the user in overcoming some of the restrictions of distance-based similarity search.\n            Give these alternative questions, each on a new line.\n            Question: What is fs module?\n            Output:\n        ", additional_kwargs={}, response_metadata={})]
            | llm
            # content='What functionalities does the fs module provide?  \nCan you explain the purpose of the fs module in programming?  \nWhat are the main features of the fs module?  \nHow is the fs module used in file system operations?  \nWhat does the fs module do in a development environment?' additional_kwargs={'refusal': None} response_metadata={'token_usage': {'completion_tokens': 57, 'prompt_tokens': 89, 'total_tokens': 146, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4.1-mini-2025-04-14', 'system_fingerprint': 'fp_79b79be41f', 'id': 'chatcmpl-BS3dAiELwGPUNzSla6Q0Oyl4ieJQz', 'finish_reason': 'stop', 'logprobs': None} id='run-ea9a9b93-eefe-4f8d-85fd-6bdb8f794ad2-0' usage_metadata={'input_tokens': 89, 'output_tokens': 57, 'total_tokens': 146, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}
            | StrOutputParser()
            # What functionalities does the fs module provide?  
            # Can you explain the purpose of the fs module?
            # What are the main features of the fs module?
            # How does the fs module work in programming?
            # What is the role of the fs module in file handling?
            | (lambda x: [i for i in x.split("\n") if x!=''])
            # ['What is the purpose of the fs module in programming?  ', 'Can you explain the functionality of the fs module?  ', 'How does the fs module work in coding environments?  ', 'What are the main features of the fs module?  ', 'In what scenarios is the fs module used?']
            | retriever.map()
            # [[Document(metadata={'page_label': '10', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'creator': 'Acrobat PDFMaker 17 for Word', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': '2036488a-d825-43b1-988f-b1276b73138f', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'total_pages': 125, 'page_label': '11', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'cd80c3d9-7f53-4338-b097-226559c503d3', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'page_label': '10', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': '5db3d910-6a3a-4c4d-a369-8fd103c3f37e', '_collection_name': 'query_translations'}, page_content='Version 1.0 10 \nSection 3: Node.js Module System \nLesson 1: Section Intro \nThe best way to get started with Node.js is to explore its module system. The module \nsystem lets you load external libraries into your application. That’ll enable you to take \nadvantage of built-in Node.js modules as well as third-party npm modules. This includes \nlibraries for connecting to database, creating web servers, and more! \nLesson 2: Importing Node.js Core Modules \nNode.js comes with dozens of built-in modules. These built-in modules, sometimes \nreferred to as core modules, give you access to tools for working with the file system, \nmaking http requests, creating web servers, and more! In this lesson, you’ll learn how to \nload in those core modules and use them in your code. \nImporting Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them.'), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'total_pages': 125, 'page_label': '11', 'moddate': "D:20190227140340Z00'00'", 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'eccf6f95-d5e0-4457-b672-bd04c29deeab', '_collection_name': 'query_translations'}, page_content="The code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files \nNode.js runs the scripts that you require. That means the require call above will cause \nutils.js to run. Node.js provides the required script with a place to store values that \nshould be exported as part of the library. This is on module.exports. \nYou can see utils.js below. A function is defined and then assigned to module.exports. \nThe value stored on module.exports will be the return value for require when the script is \nimported. That means other scripts could load in the utilities to access the check function. \nconst check = function () { \n    console.log('Doing some work...') \n} \n \nmodule.exports = check \nIf you run the original script, you’ll see the message that logged from the check function in \nutils.js.")], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'page_label': '10', 'total_pages': 125, 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': '2036488a-d825-43b1-988f-b1276b73138f', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'page_label': '11', 'moddate': "D:20190227140340Z00'00'", 'total_pages': 125, 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'cd80c3d9-7f53-4338-b097-226559c503d3', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'page_label': '10', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': '5db3d910-6a3a-4c4d-a369-8fd103c3f37e', '_collection_name': 'query_translations'}, page_content='Version 1.0 10 \nSection 3: Node.js Module System \nLesson 1: Section Intro \nThe best way to get started with Node.js is to explore its module system. The module \nsystem lets you load external libraries into your application. That’ll enable you to take \nadvantage of built-in Node.js modules as well as third-party npm modules. This includes \nlibraries for connecting to database, creating web servers, and more! \nLesson 2: Importing Node.js Core Modules \nNode.js comes with dozens of built-in modules. These built-in modules, sometimes \nreferred to as core modules, give you access to tools for working with the file system, \nmaking http requests, creating web servers, and more! In this lesson, you’ll learn how to \nload in those core modules and use them in your code. \nImporting Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them.'), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'creationdate': "D:20190227140340ript above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'page_label': '11', 'creationdate': "D:20190227140340Z00'00'", 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'cd80c3d9-7f53-4338-b097-226559c503d3', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents   
            | self.rank_fusion
            # [[Document(metadata={'page_label': '10', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': 'dee2ca92-262e-41ce-993d-f62a1ddbeb34', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), 0.01639344262295082], [Document(metadata={'page_label': '10', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': 'dee2ca92-262e-41ce-993d-f62a1ddbeb34', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), 0.01639344262295082], [Document(metadata={'page_label': '10', 'creationdate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': 'dee2ca92-262e-41ce-993d-f62a1ddbeb34', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), 0.01639344262295082], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'page_label': '10', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': 'dee2ca92-262e-41ce-993d-f62a1ddbeb34', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), 0.01639344262295082], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'page_label': '10', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 9, 'author': 'Andrew Mead', '_id': 'dee2ca92-262e-41ce-993d-f62a1ddbeb34', '_collection_name': 'query_translations'}, page_content="Importing Node.js Core Modules \nTo get started, let’s work with some built-in Node.js modules. These are modules that \ncome with Node, so there’s no need to install them. \nThe module system is built around the require function. This function is used to load in a \nmodule and get access to its contents. require is a global variable provided to all your \nNode.js scripts, so you can use it anywhere you like! \nLet’s look at an example. \nconst fs = require('fs') \n  \nfs.writeFileSync('notes.txt', 'I live in Philadelphia') \nThe script above uses require to load in the fs module. This is a built-in Node.js module \nthat provides functions you can use to manipulate the file system. The script uses \nwriteFileSync to write a message to notes.txt. \nAfter you run the script, you’ll notice a new notes.txt file in your directory. Open it up and \nyou’ll see, “I live in Philadelphia!”. \nLinks \n• Node.js documentation"), 0.01639344262295082], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'creationdate': "D:20190227140340Z00'00'", 'page_label': '11', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'f3bb7a23-e9a7-48b3-8c1c-065603a88429', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), 0.016129032258064516], [Document(metadata={'page_label': '11', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'creator': 'Acrobat PDFMaker 17 for Word', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'f3bb7a23-e9a7-48b3-8c1c-065603a88429', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), 0.016129032258064516], [Document(metadata={'page_label': '11', 'total_pages': 125, 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'creationdate': "D:20190227140340Z00'00'", 'creator': 'Acrobat PDFMaker 17 for Word', 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'f3bb7a23-e9a7-48b3-8c1c-065603a88429', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), 0.016129032258064516], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'moddate': "D:20190227140340Z00'00'", 'page_label': '11', 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'total_pages': 125, 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'f3bb7a23-e9a7-48b3-8c1c-065603a88429', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a file called utils.js in the src directory. It \nstores the module contents in a variable, and then uses the contents in the script. \nExporting from Files"), 0.016129032258064516], [Document(metadata={'creator': 'Acrobat PDFMaker 17 for Word', 'creationdate': "D:20190227140340Z00'00'", 'source': 'C:\\Users\\asus\\Desktop\\GenAI\\nodejs.pdf', 'moddate': "D:20190227140340Z00'00'", 'page_label': '11', 'total_pages': 125, 'producer': 'macOS Version 10.14.1 (Build 18B75) Quartz PDFContext', 'page': 10, 'author': 'Andrew Mead', '_id': 'f3bb7a23-e9a7-48b3-8c1c-065603a88429', '_collection_name': 'query_translations'}, page_content="Version 1.0 11 \n• Node.js fs documentation \nLesson 3: Importing Your Own Files \nPutting all your code in a single file makes it easy to get started with Node.js. As you add \nmore code, you’ll want to stay organized and break your Node.js app into multiple scripts \nthat all work together. In this lesson, you’ll learn how to create a Node.js application that’s \nspread out across multiple files. \nImporting Your Own Files \nYou know how to use require to load in built-in modules. require can also be used to \nload in JavaScript files you’ve created. All you need to do is provide require with a \nrelative path to the script you want to load. This path should start with ./ and then link to \nthe file that needs to be loaded in. \nconst checkUtils = require('./src/utils.js') \n \ncheckUtils() \nThe code above uses require to load in a fi
        )

        relevant_docs = retrieval_chain.invoke(
            {"question": user_prompt}
        )

        return relevant_docs